// <auto-generated />
using System;
using Clinic.Core.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.Core.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    partial class ClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Clinic.Core.Domain.DoctorsSpecialization", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int")
                        .HasColumnName("specialization_id");

                    b.HasKey("DoctorId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("doctors_specializations", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.MedicinesAssigned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DayCount")
                        .HasColumnType("int")
                        .HasColumnName("day_count");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dose");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint")
                        .HasColumnName("patient_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<long>("VisitProcedureId")
                        .HasColumnType("bigint")
                        .HasColumnName("visit_procedure_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DoctorId" }, "doctor_id");

                    b.HasIndex(new[] { "PatientId" }, "patient_id");

                    b.HasIndex(new[] { "VisitProcedureId" }, "visit_procedure_id");

                    b.ToTable("medicines_assigned", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.NotWorkingDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<DateOnly>("NotWorkDate")
                        .HasColumnType("date")
                        .HasColumnName("not_work_date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DoctorId" }, "doctor_id")
                        .HasDatabaseName("doctor_id1");

                    b.ToTable("not_working_days", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.Procedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("procedures", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.ProcedureImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("url");

                    b.Property<long>("VisitProcedureId")
                        .HasColumnType("bigint")
                        .HasColumnName("visit_procedure_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VisitProcedureId" }, "visit_procedure_id")
                        .HasDatabaseName("visit_procedure_id1");

                    b.ToTable("procedure_images", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("specializations", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<int>("TypesId")
                        .HasColumnType("int")
                        .HasColumnName("types_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "phone")
                        .IsUnique();

                    b.HasIndex(new[] { "TypesId" }, "types_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_types", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime?>("EndActualDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_actual_date");

                    b.Property<DateTime>("EndScheduledDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_scheduled_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint")
                        .HasColumnName("patient_id");

                    b.Property<DateTime?>("StartActualDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_actual_date");

                    b.Property<DateTime>("StartScheduledDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_scheduled_date");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DoctorId" }, "doctor_id")
                        .HasDatabaseName("doctor_id2");

                    b.HasIndex(new[] { "PatientId" }, "patient_id")
                        .HasDatabaseName("patient_id1");

                    b.HasIndex(new[] { "StatusId" }, "status_id");

                    b.ToTable("visits", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.VisitStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("visit_statuses", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.VisitsProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<long>("ProcedureId")
                        .HasColumnType("bigint")
                        .HasColumnName("procedure_id");

                    b.Property<long>("VisitId")
                        .HasColumnType("bigint")
                        .HasColumnName("visit_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProcedureId" }, "procedure_id");

                    b.HasIndex(new[] { "VisitId" }, "visit_id");

                    b.ToTable("visits_procedures", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("week_day", (string)null);
                });

            modelBuilder.Entity("Clinic.Core.Domain.WeekDaySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<TimeOnly>("BreakEndTime")
                        .HasColumnType("time")
                        .HasColumnName("break_end_time");

                    b.Property<TimeOnly>("BreakStartTime")
                        .HasColumnType("time")
                        .HasColumnName("break_start_time");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<int>("WeekDayId")
                        .HasColumnType("int")
                        .HasColumnName("week_day_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DoctorId" }, "doctor_id")
                        .HasDatabaseName("doctor_id3");

                    b.HasIndex(new[] { "WeekDayId" }, "week_day_id");

                    b.ToTable("week_day_schedule", (string)null);
                });

            modelBuilder.Entity("SpecializationUser", b =>
                {
                    b.Property<long>("DoctorsId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpecializationsId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsId", "SpecializationsId");

                    b.HasIndex("SpecializationsId");

                    b.ToTable("SpecializationUser");
                });

            modelBuilder.Entity("Clinic.Core.Domain.DoctorsSpecialization", b =>
                {
                    b.HasOne("Clinic.Core.Domain.User", "Doctor")
                        .WithMany("DoctorsSpecializations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctor_id");

                    b.HasOne("Clinic.Core.Domain.Specialization", "Specialization")
                        .WithMany("DoctorsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialization_id");

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Clinic.Core.Domain.MedicinesAssigned", b =>
                {
                    b.HasOne("Clinic.Core.Domain.User", "Doctor")
                        .WithMany("MedicinesAssignedDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("medicines_assigned_ibfk_1");

                    b.HasOne("Clinic.Core.Domain.User", "Patient")
                        .WithMany("MedicinesAssignedPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("medicines_assigned_ibfk_2");

                    b.HasOne("Clinic.Core.Domain.VisitsProcedure", "VisitProcedure")
                        .WithMany("MedicinesAssigneds")
                        .HasForeignKey("VisitProcedureId")
                        .IsRequired()
                        .HasConstraintName("medicines_assigned_ibfk_3");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("VisitProcedure");
                });

            modelBuilder.Entity("Clinic.Core.Domain.NotWorkingDay", b =>
                {
                    b.HasOne("Clinic.Core.Domain.User", "Doctor")
                        .WithMany("NotWorkingDays")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("not_working_days_ibfk_1");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Clinic.Core.Domain.ProcedureImage", b =>
                {
                    b.HasOne("Clinic.Core.Domain.VisitsProcedure", "VisitProcedure")
                        .WithMany("ProcedureImages")
                        .HasForeignKey("VisitProcedureId")
                        .IsRequired()
                        .HasConstraintName("procedure_images_ibfk_1");

                    b.Navigation("VisitProcedure");
                });

            modelBuilder.Entity("Clinic.Core.Domain.User", b =>
                {
                    b.HasOne("Clinic.Core.Domain.UserType", "Types")
                        .WithMany("Users")
                        .HasForeignKey("TypesId")
                        .IsRequired()
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Clinic.Core.Domain.Visit", b =>
                {
                    b.HasOne("Clinic.Core.Domain.User", "Doctor")
                        .WithMany("VisitDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("visits_ibfk_1");

                    b.HasOne("Clinic.Core.Domain.User", "Patient")
                        .WithMany("VisitPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("visits_ibfk_2");

                    b.HasOne("Clinic.Core.Domain.VisitStatus", "Status")
                        .WithMany("Visits")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("visits_ibfk_3");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Clinic.Core.Domain.VisitsProcedure", b =>
                {
                    b.HasOne("Clinic.Core.Domain.Procedure", "Procedure")
                        .WithMany("VisitsProcedures")
                        .HasForeignKey("ProcedureId")
                        .IsRequired()
                        .HasConstraintName("visits_procedures_ibfk_2");

                    b.HasOne("Clinic.Core.Domain.Visit", "Visit")
                        .WithMany("VisitsProcedures")
                        .HasForeignKey("VisitId")
                        .IsRequired()
                        .HasConstraintName("visits_procedures_ibfk_1");

                    b.Navigation("Procedure");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Clinic.Core.Domain.WeekDaySchedule", b =>
                {
                    b.HasOne("Clinic.Core.Domain.User", "Doctor")
                        .WithMany("WeekDaySchedules")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("week_day_schedule_ibfk_1");

                    b.HasOne("Clinic.Core.Domain.WeekDay", "WeekDay")
                        .WithMany("WeekDaySchedules")
                        .HasForeignKey("WeekDayId")
                        .IsRequired()
                        .HasConstraintName("week_day_schedule_ibfk_2");

                    b.Navigation("Doctor");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("SpecializationUser", b =>
                {
                    b.HasOne("Clinic.Core.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Core.Domain.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.Core.Domain.Procedure", b =>
                {
                    b.Navigation("VisitsProcedures");
                });

            modelBuilder.Entity("Clinic.Core.Domain.Specialization", b =>
                {
                    b.Navigation("DoctorsSpecializations");
                });

            modelBuilder.Entity("Clinic.Core.Domain.User", b =>
                {
                    b.Navigation("DoctorsSpecializations");

                    b.Navigation("MedicinesAssignedDoctors");

                    b.Navigation("MedicinesAssignedPatients");

                    b.Navigation("NotWorkingDays");

                    b.Navigation("VisitDoctors");

                    b.Navigation("VisitPatients");

                    b.Navigation("WeekDaySchedules");
                });

            modelBuilder.Entity("Clinic.Core.Domain.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Clinic.Core.Domain.Visit", b =>
                {
                    b.Navigation("VisitsProcedures");
                });

            modelBuilder.Entity("Clinic.Core.Domain.VisitStatus", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Clinic.Core.Domain.VisitsProcedure", b =>
                {
                    b.Navigation("MedicinesAssigneds");

                    b.Navigation("ProcedureImages");
                });

            modelBuilder.Entity("Clinic.Core.Domain.WeekDay", b =>
                {
                    b.Navigation("WeekDaySchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
